// This is a generated file. Use and modify at your own risk.
//////////////////////////////////////////////////////////////////////////////// 
// default_nettype of none prevents implicit wire declaration.
`default_nettype none
`timescale 1 ns / 1 ps
// Top level of the kernel. Do not modify module name, parameters or ports.
module AXISBR #(
  parameter integer C_S_AXI_CONTROL_ADDR_WIDTH = 12 ,
  parameter integer C_S_AXI_CONTROL_DATA_WIDTH = 32 ,
  parameter integer C_M00_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M00_AXI_DATA_WIDTH       = 32 ,
  parameter integer C_M01_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M01_AXI_DATA_WIDTH       = 512,
  parameter integer C_M02_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M02_AXI_DATA_WIDTH       = 512,
  parameter integer C_M03_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M03_AXI_DATA_WIDTH       = 512,
  parameter integer C_M04_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M04_AXI_DATA_WIDTH       = 512,
  parameter integer C_M05_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M05_AXI_DATA_WIDTH       = 512,
  parameter integer C_M06_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M06_AXI_DATA_WIDTH       = 512,
  parameter integer C_M07_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M07_AXI_DATA_WIDTH       = 512,
  parameter integer C_M08_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M08_AXI_DATA_WIDTH       = 512,
  parameter integer C_M09_AXI_ADDR_WIDTH       = 64 ,
  parameter integer C_M09_AXI_DATA_WIDTH       = 512,
  parameter integer C_AXIS00_TDATA_WIDTH       = 512,
  parameter integer C_AXIS01_TDATA_WIDTH       = 32 ,
  parameter integer C_AXIS02_TDATA_WIDTH       = 512,
  parameter integer C_AXIS03_TDATA_WIDTH       = 512,
  parameter integer C_AXIS04_TDATA_WIDTH       = 512,
  parameter integer C_AXIS05_TDATA_WIDTH       = 512,
  parameter integer C_AXIS06_TDATA_WIDTH       = 512,
  parameter integer C_AXIS07_TDATA_WIDTH       = 512,
  parameter integer C_AXIS08_TDATA_WIDTH       = 512,
  parameter integer C_AXIS09_TDATA_WIDTH       = 512
)
(
  // System Signals
  input  wire                                    ap_clk               ,
  input  wire                                    ap_rst_n             ,
  //  Note: A minimum subset of AXI4 memory mapped signals are declared.  AXI
  // signals omitted from these interfaces are automatically inferred with the
  // optimal values for Xilinx accleration platforms.  This allows Xilinx AXI4 Interconnects
  // within the system to be optimized by removing logic for AXI4 protocol
  // features that are not necessary. When adapting AXI4 masters within the RTL
  // kernel that have signals not declared below, it is suitable to add the
  // signals to the declarations below to connect them to the AXI4 Master.
  // 
  // List of ommited signals - effect
  // -------------------------------
  // ID - Transaction ID are used for multithreading and out of order
  // transactions.  This increases complexity. This saves logic and increases Fmax
  // in the system when ommited.
  // SIZE - Default value is log2(data width in bytes). Needed for subsize bursts.
  // This saves logic and increases Fmax in the system when ommited.
  // BURST - Default value (0b01) is incremental.  Wrap and fixed bursts are not
  // recommended. This saves logic and increases Fmax in the system when ommited.
  // LOCK - Not supported in AXI4
  // CACHE - Default value (0b0011) allows modifiable transactions. No benefit to
  // changing this.
  // PROT - Has no effect in current acceleration platforms.
  // QOS - Has no effect in current acceleration platforms.
  // REGION - Has no effect in current acceleration platforms.
  // USER - Has no effect in current acceleration platforms.
  // RESP - Not useful in most acceleration platforms.
  // 
  // AXI4 master interface m00_axi
  output wire                                    m00_axi_awvalid      ,
  input  wire                                    m00_axi_awready      ,
  output wire [C_M00_AXI_ADDR_WIDTH-1:0]         m00_axi_awaddr       ,
  output wire [8-1:0]                            m00_axi_awlen        ,
  output wire                                    m00_axi_wvalid       ,
  input  wire                                    m00_axi_wready       ,
  output wire [C_M00_AXI_DATA_WIDTH-1:0]         m00_axi_wdata        ,
  output wire [C_M00_AXI_DATA_WIDTH/8-1:0]       m00_axi_wstrb        ,
  output wire                                    m00_axi_wlast        ,
  input  wire                                    m00_axi_bvalid       ,
  output wire                                    m00_axi_bready       ,
  output wire                                    m00_axi_arvalid      ,
  input  wire                                    m00_axi_arready      ,
  output wire [C_M00_AXI_ADDR_WIDTH-1:0]         m00_axi_araddr       ,
  output wire [8-1:0]                            m00_axi_arlen        ,
  input  wire                                    m00_axi_rvalid       ,
  output wire                                    m00_axi_rready       ,
  input  wire [C_M00_AXI_DATA_WIDTH-1:0]         m00_axi_rdata        ,
  input  wire                                    m00_axi_rlast        ,
  // AXI4 master interface m01_axi
  output wire                                    m01_axi_awvalid      ,
  input  wire                                    m01_axi_awready      ,
  output wire [C_M01_AXI_ADDR_WIDTH-1:0]         m01_axi_awaddr       ,
  output wire [8-1:0]                            m01_axi_awlen        ,
  output wire                                    m01_axi_wvalid       ,
  input  wire                                    m01_axi_wready       ,
  output wire [C_M01_AXI_DATA_WIDTH-1:0]         m01_axi_wdata        ,
  output wire [C_M01_AXI_DATA_WIDTH/8-1:0]       m01_axi_wstrb        ,
  output wire                                    m01_axi_wlast        ,
  input  wire                                    m01_axi_bvalid       ,
  output wire                                    m01_axi_bready       ,
  output wire                                    m01_axi_arvalid      ,
  input  wire                                    m01_axi_arready      ,
  output wire [C_M01_AXI_ADDR_WIDTH-1:0]         m01_axi_araddr       ,
  output wire [8-1:0]                            m01_axi_arlen        ,
  input  wire                                    m01_axi_rvalid       ,
  output wire                                    m01_axi_rready       ,
  input  wire [C_M01_AXI_DATA_WIDTH-1:0]         m01_axi_rdata        ,
  input  wire                                    m01_axi_rlast        ,
  // AXI4 master interface m02_axi
  output wire                                    m02_axi_awvalid      ,
  input  wire                                    m02_axi_awready      ,
  output wire [C_M02_AXI_ADDR_WIDTH-1:0]         m02_axi_awaddr       ,
  output wire [8-1:0]                            m02_axi_awlen        ,
  output wire                                    m02_axi_wvalid       ,
  input  wire                                    m02_axi_wready       ,
  output wire [C_M02_AXI_DATA_WIDTH-1:0]         m02_axi_wdata        ,
  output wire [C_M02_AXI_DATA_WIDTH/8-1:0]       m02_axi_wstrb        ,
  output wire                                    m02_axi_wlast        ,
  input  wire                                    m02_axi_bvalid       ,
  output wire                                    m02_axi_bready       ,
  output wire                                    m02_axi_arvalid      ,
  input  wire                                    m02_axi_arready      ,
  output wire [C_M02_AXI_ADDR_WIDTH-1:0]         m02_axi_araddr       ,
  output wire [8-1:0]                            m02_axi_arlen        ,
  input  wire                                    m02_axi_rvalid       ,
  output wire                                    m02_axi_rready       ,
  input  wire [C_M02_AXI_DATA_WIDTH-1:0]         m02_axi_rdata        ,
  input  wire                                    m02_axi_rlast        ,
  // AXI4 master interface m03_axi
  output wire                                    m03_axi_awvalid      ,
  input  wire                                    m03_axi_awready      ,
  output wire [C_M03_AXI_ADDR_WIDTH-1:0]         m03_axi_awaddr       ,
  output wire [8-1:0]                            m03_axi_awlen        ,
  output wire                                    m03_axi_wvalid       ,
  input  wire                                    m03_axi_wready       ,
  output wire [C_M03_AXI_DATA_WIDTH-1:0]         m03_axi_wdata        ,
  output wire [C_M03_AXI_DATA_WIDTH/8-1:0]       m03_axi_wstrb        ,
  output wire                                    m03_axi_wlast        ,
  input  wire                                    m03_axi_bvalid       ,
  output wire                                    m03_axi_bready       ,
  output wire                                    m03_axi_arvalid      ,
  input  wire                                    m03_axi_arready      ,
  output wire [C_M03_AXI_ADDR_WIDTH-1:0]         m03_axi_araddr       ,
  output wire [8-1:0]                            m03_axi_arlen        ,
  input  wire                                    m03_axi_rvalid       ,
  output wire                                    m03_axi_rready       ,
  input  wire [C_M03_AXI_DATA_WIDTH-1:0]         m03_axi_rdata        ,
  input  wire                                    m03_axi_rlast        ,
  // AXI4 master interface m04_axi
  output wire                                    m04_axi_awvalid      ,
  input  wire                                    m04_axi_awready      ,
  output wire [C_M04_AXI_ADDR_WIDTH-1:0]         m04_axi_awaddr       ,
  output wire [8-1:0]                            m04_axi_awlen        ,
  output wire                                    m04_axi_wvalid       ,
  input  wire                                    m04_axi_wready       ,
  output wire [C_M04_AXI_DATA_WIDTH-1:0]         m04_axi_wdata        ,
  output wire [C_M04_AXI_DATA_WIDTH/8-1:0]       m04_axi_wstrb        ,
  output wire                                    m04_axi_wlast        ,
  input  wire                                    m04_axi_bvalid       ,
  output wire                                    m04_axi_bready       ,
  output wire                                    m04_axi_arvalid      ,
  input  wire                                    m04_axi_arready      ,
  output wire [C_M04_AXI_ADDR_WIDTH-1:0]         m04_axi_araddr       ,
  output wire [8-1:0]                            m04_axi_arlen        ,
  input  wire                                    m04_axi_rvalid       ,
  output wire                                    m04_axi_rready       ,
  input  wire [C_M04_AXI_DATA_WIDTH-1:0]         m04_axi_rdata        ,
  input  wire                                    m04_axi_rlast        ,
  // AXI4 master interface m05_axi
  output wire                                    m05_axi_awvalid      ,
  input  wire                                    m05_axi_awready      ,
  output wire [C_M05_AXI_ADDR_WIDTH-1:0]         m05_axi_awaddr       ,
  output wire [8-1:0]                            m05_axi_awlen        ,
  output wire                                    m05_axi_wvalid       ,
  input  wire                                    m05_axi_wready       ,
  output wire [C_M05_AXI_DATA_WIDTH-1:0]         m05_axi_wdata        ,
  output wire [C_M05_AXI_DATA_WIDTH/8-1:0]       m05_axi_wstrb        ,
  output wire                                    m05_axi_wlast        ,
  input  wire                                    m05_axi_bvalid       ,
  output wire                                    m05_axi_bready       ,
  output wire                                    m05_axi_arvalid      ,
  input  wire                                    m05_axi_arready      ,
  output wire [C_M05_AXI_ADDR_WIDTH-1:0]         m05_axi_araddr       ,
  output wire [8-1:0]                            m05_axi_arlen        ,
  input  wire                                    m05_axi_rvalid       ,
  output wire                                    m05_axi_rready       ,
  input  wire [C_M05_AXI_DATA_WIDTH-1:0]         m05_axi_rdata        ,
  input  wire                                    m05_axi_rlast        ,
  // AXI4 master interface m06_axi
  output wire                                    m06_axi_awvalid      ,
  input  wire                                    m06_axi_awready      ,
  output wire [C_M06_AXI_ADDR_WIDTH-1:0]         m06_axi_awaddr       ,
  output wire [8-1:0]                            m06_axi_awlen        ,
  output wire                                    m06_axi_wvalid       ,
  input  wire                                    m06_axi_wready       ,
  output wire [C_M06_AXI_DATA_WIDTH-1:0]         m06_axi_wdata        ,
  output wire [C_M06_AXI_DATA_WIDTH/8-1:0]       m06_axi_wstrb        ,
  output wire                                    m06_axi_wlast        ,
  input  wire                                    m06_axi_bvalid       ,
  output wire                                    m06_axi_bready       ,
  output wire                                    m06_axi_arvalid      ,
  input  wire                                    m06_axi_arready      ,
  output wire [C_M06_AXI_ADDR_WIDTH-1:0]         m06_axi_araddr       ,
  output wire [8-1:0]                            m06_axi_arlen        ,
  input  wire                                    m06_axi_rvalid       ,
  output wire                                    m06_axi_rready       ,
  input  wire [C_M06_AXI_DATA_WIDTH-1:0]         m06_axi_rdata        ,
  input  wire                                    m06_axi_rlast        ,
  // AXI4 master interface m07_axi
  output wire                                    m07_axi_awvalid      ,
  input  wire                                    m07_axi_awready      ,
  output wire [C_M07_AXI_ADDR_WIDTH-1:0]         m07_axi_awaddr       ,
  output wire [8-1:0]                            m07_axi_awlen        ,
  output wire                                    m07_axi_wvalid       ,
  input  wire                                    m07_axi_wready       ,
  output wire [C_M07_AXI_DATA_WIDTH-1:0]         m07_axi_wdata        ,
  output wire [C_M07_AXI_DATA_WIDTH/8-1:0]       m07_axi_wstrb        ,
  output wire                                    m07_axi_wlast        ,
  input  wire                                    m07_axi_bvalid       ,
  output wire                                    m07_axi_bready       ,
  output wire                                    m07_axi_arvalid      ,
  input  wire                                    m07_axi_arready      ,
  output wire [C_M07_AXI_ADDR_WIDTH-1:0]         m07_axi_araddr       ,
  output wire [8-1:0]                            m07_axi_arlen        ,
  input  wire                                    m07_axi_rvalid       ,
  output wire                                    m07_axi_rready       ,
  input  wire [C_M07_AXI_DATA_WIDTH-1:0]         m07_axi_rdata        ,
  input  wire                                    m07_axi_rlast        ,
  // AXI4 master interface m08_axi
  output wire                                    m08_axi_awvalid      ,
  input  wire                                    m08_axi_awready      ,
  output wire [C_M08_AXI_ADDR_WIDTH-1:0]         m08_axi_awaddr       ,
  output wire [8-1:0]                            m08_axi_awlen        ,
  output wire                                    m08_axi_wvalid       ,
  input  wire                                    m08_axi_wready       ,
  output wire [C_M08_AXI_DATA_WIDTH-1:0]         m08_axi_wdata        ,
  output wire [C_M08_AXI_DATA_WIDTH/8-1:0]       m08_axi_wstrb        ,
  output wire                                    m08_axi_wlast        ,
  input  wire                                    m08_axi_bvalid       ,
  output wire                                    m08_axi_bready       ,
  output wire                                    m08_axi_arvalid      ,
  input  wire                                    m08_axi_arready      ,
  output wire [C_M08_AXI_ADDR_WIDTH-1:0]         m08_axi_araddr       ,
  output wire [8-1:0]                            m08_axi_arlen        ,
  input  wire                                    m08_axi_rvalid       ,
  output wire                                    m08_axi_rready       ,
  input  wire [C_M08_AXI_DATA_WIDTH-1:0]         m08_axi_rdata        ,
  input  wire                                    m08_axi_rlast        ,
  // AXI4 master interface m09_axi
  output wire                                    m09_axi_awvalid      ,
  input  wire                                    m09_axi_awready      ,
  output wire [C_M09_AXI_ADDR_WIDTH-1:0]         m09_axi_awaddr       ,
  output wire [8-1:0]                            m09_axi_awlen        ,
  output wire                                    m09_axi_wvalid       ,
  input  wire                                    m09_axi_wready       ,
  output wire [C_M09_AXI_DATA_WIDTH-1:0]         m09_axi_wdata        ,
  output wire [C_M09_AXI_DATA_WIDTH/8-1:0]       m09_axi_wstrb        ,
  output wire                                    m09_axi_wlast        ,
  input  wire                                    m09_axi_bvalid       ,
  output wire                                    m09_axi_bready       ,
  output wire                                    m09_axi_arvalid      ,
  input  wire                                    m09_axi_arready      ,
  output wire [C_M09_AXI_ADDR_WIDTH-1:0]         m09_axi_araddr       ,
  output wire [8-1:0]                            m09_axi_arlen        ,
  input  wire                                    m09_axi_rvalid       ,
  output wire                                    m09_axi_rready       ,
  input  wire [C_M09_AXI_DATA_WIDTH-1:0]         m09_axi_rdata        ,
  input  wire                                    m09_axi_rlast        ,
  // AXI4-Stream (master) interface axis00
  output wire                                    axis00_tvalid        ,
  input  wire                                    axis00_tready        ,
  output wire [C_AXIS00_TDATA_WIDTH-1:0]         axis00_tdata         ,
  output wire [C_AXIS00_TDATA_WIDTH/8-1:0]       axis00_tkeep         ,
  output wire                                    axis00_tlast         ,
  // AXI4-Stream (slave) interface axis01
  input  wire                                    axis01_tvalid        ,
  output wire                                    axis01_tready        ,
  input  wire [C_AXIS01_TDATA_WIDTH-1:0]         axis01_tdata         ,
  input  wire [C_AXIS01_TDATA_WIDTH/8-1:0]       axis01_tkeep         ,
  input  wire                                    axis01_tlast         ,
  // AXI4-Stream (slave) interface axis02
  input  wire                                    axis02_tvalid        ,
  output wire                                    axis02_tready        ,
  input  wire [C_AXIS02_TDATA_WIDTH-1:0]         axis02_tdata         ,
  input  wire [C_AXIS02_TDATA_WIDTH/8-1:0]       axis02_tkeep         ,
  input  wire                                    axis02_tlast         ,
  // AXI4-Stream (slave) interface axis03
  input  wire                                    axis03_tvalid        ,
  output wire                                    axis03_tready        ,
  input  wire [C_AXIS03_TDATA_WIDTH-1:0]         axis03_tdata         ,
  input  wire [C_AXIS03_TDATA_WIDTH/8-1:0]       axis03_tkeep         ,
  input  wire                                    axis03_tlast         ,
  // AXI4-Stream (slave) interface axis04
  input  wire                                    axis04_tvalid        ,
  output wire                                    axis04_tready        ,
  input  wire [C_AXIS04_TDATA_WIDTH-1:0]         axis04_tdata         ,
  input  wire [C_AXIS04_TDATA_WIDTH/8-1:0]       axis04_tkeep         ,
  input  wire                                    axis04_tlast         ,
  // AXI4-Stream (slave) interface axis05
  input  wire                                    axis05_tvalid        ,
  output wire                                    axis05_tready        ,
  input  wire [C_AXIS05_TDATA_WIDTH-1:0]         axis05_tdata         ,
  input  wire [C_AXIS05_TDATA_WIDTH/8-1:0]       axis05_tkeep         ,
  input  wire                                    axis05_tlast         ,
  // AXI4-Stream (master) interface axis06
  output wire                                    axis06_tvalid        ,
  input  wire                                    axis06_tready        ,
  output wire [C_AXIS06_TDATA_WIDTH-1:0]         axis06_tdata         ,
  output wire [C_AXIS06_TDATA_WIDTH/8-1:0]       axis06_tkeep         ,
  output wire                                    axis06_tlast         ,
  // AXI4-Stream (master) interface axis07
  output wire                                    axis07_tvalid        ,
  input  wire                                    axis07_tready        ,
  output wire [C_AXIS07_TDATA_WIDTH-1:0]         axis07_tdata         ,
  output wire [C_AXIS07_TDATA_WIDTH/8-1:0]       axis07_tkeep         ,
  output wire                                    axis07_tlast         ,
  // AXI4-Stream (master) interface axis08
  output wire                                    axis08_tvalid        ,
  input  wire                                    axis08_tready        ,
  output wire [C_AXIS08_TDATA_WIDTH-1:0]         axis08_tdata         ,
  output wire [C_AXIS08_TDATA_WIDTH/8-1:0]       axis08_tkeep         ,
  output wire                                    axis08_tlast         ,
  // AXI4-Stream (master) interface axis09
  output wire                                    axis09_tvalid        ,
  input  wire                                    axis09_tready        ,
  output wire [C_AXIS09_TDATA_WIDTH-1:0]         axis09_tdata         ,
  output wire [C_AXIS09_TDATA_WIDTH/8-1:0]       axis09_tkeep         ,
  output wire                                    axis09_tlast         ,
  // AXI4-Lite slave interface
  input  wire                                    s_axi_control_awvalid,
  output wire                                    s_axi_control_awready,
  input  wire [C_S_AXI_CONTROL_ADDR_WIDTH-1:0]   s_axi_control_awaddr ,
  input  wire                                    s_axi_control_wvalid ,
  output wire                                    s_axi_control_wready ,
  input  wire [C_S_AXI_CONTROL_DATA_WIDTH-1:0]   s_axi_control_wdata  ,
  input  wire [C_S_AXI_CONTROL_DATA_WIDTH/8-1:0] s_axi_control_wstrb  ,
  input  wire                                    s_axi_control_arvalid,
  output wire                                    s_axi_control_arready,
  input  wire [C_S_AXI_CONTROL_ADDR_WIDTH-1:0]   s_axi_control_araddr ,
  output wire                                    s_axi_control_rvalid ,
  input  wire                                    s_axi_control_rready ,
  output wire [C_S_AXI_CONTROL_DATA_WIDTH-1:0]   s_axi_control_rdata  ,
  output wire [2-1:0]                            s_axi_control_rresp  ,
  output wire                                    s_axi_control_bvalid ,
  input  wire                                    s_axi_control_bready ,
  output wire [2-1:0]                            s_axi_control_bresp  ,
  output wire                                    interrupt            
);

///////////////////////////////////////////////////////////////////////////////
// Local Parameters
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Wires and Variables
///////////////////////////////////////////////////////////////////////////////
(* DONT_TOUCH = "yes" *)
reg                                 areset                         = 1'b0;
wire                                ap_start                      ;
wire                                ap_idle                       ;
wire                                ap_done                       ;
wire                                ap_ready                      ;
wire [64-1:0]                       axi00_ptr0                    ;
wire [64-1:0]                       axi01_ptr0                    ;
wire [64-1:0]                       axi02_ptr0                    ;
wire [64-1:0]                       axi03_ptr0                    ;
wire [64-1:0]                       axi04_ptr0                    ;
wire [64-1:0]                       axi05_ptr0                    ;
wire [64-1:0]                       axi06_ptr0                    ;
wire [64-1:0]                       axi07_ptr0                    ;
wire [64-1:0]                       axi08_ptr0                    ;
wire [64-1:0]                       axi09_ptr0                    ;

// Register and invert reset signal.
always @(posedge ap_clk) begin
  areset <= ~ap_rst_n;
end

///////////////////////////////////////////////////////////////////////////////
// Begin control interface RTL.  Modifying not recommended.
///////////////////////////////////////////////////////////////////////////////


// AXI4-Lite slave interface
AXISBR_control_s_axi #(
  .C_S_AXI_ADDR_WIDTH ( C_S_AXI_CONTROL_ADDR_WIDTH ),
  .C_S_AXI_DATA_WIDTH ( C_S_AXI_CONTROL_DATA_WIDTH )
)
inst_control_s_axi (
  .ACLK       ( ap_clk                ),
  .ARESET     ( areset                ),
  .ACLK_EN    ( 1'b1                  ),
  .AWVALID    ( s_axi_control_awvalid ),
  .AWREADY    ( s_axi_control_awready ),
  .AWADDR     ( s_axi_control_awaddr  ),
  .WVALID     ( s_axi_control_wvalid  ),
  .WREADY     ( s_axi_control_wready  ),
  .WDATA      ( s_axi_control_wdata   ),
  .WSTRB      ( s_axi_control_wstrb   ),
  .ARVALID    ( s_axi_control_arvalid ),
  .ARREADY    ( s_axi_control_arready ),
  .ARADDR     ( s_axi_control_araddr  ),
  .RVALID     ( s_axi_control_rvalid  ),
  .RREADY     ( s_axi_control_rready  ),
  .RDATA      ( s_axi_control_rdata   ),
  .RRESP      ( s_axi_control_rresp   ),
  .BVALID     ( s_axi_control_bvalid  ),
  .BREADY     ( s_axi_control_bready  ),
  .BRESP      ( s_axi_control_bresp   ),
  .interrupt  ( interrupt             ),
  .ap_start   ( ap_start              ),
  .ap_done    ( ap_done               ),
  .ap_ready   ( ap_ready              ),
  .ap_idle    ( ap_idle               ),
  .axi00_ptr0 ( axi00_ptr0            ),
  .axi01_ptr0 ( axi01_ptr0            ),
  .axi02_ptr0 ( axi02_ptr0            ),
  .axi03_ptr0 ( axi03_ptr0            ),
  .axi04_ptr0 ( axi04_ptr0            ),
  .axi05_ptr0 ( axi05_ptr0            ),
  .axi06_ptr0 ( axi06_ptr0            ),
  .axi07_ptr0 ( axi07_ptr0            ),
  .axi08_ptr0 ( axi08_ptr0            ),
  .axi09_ptr0 ( axi09_ptr0            )
);

///////////////////////////////////////////////////////////////////////////////
// Add kernel logic here.  Modify/remove example code as necessary.
///////////////////////////////////////////////////////////////////////////////
wire axi4outcmd_TVALID;
wire axi4outcmd_TREADY;
wire [103:0] axi4outcmd_TDATA;

wire axi4sout_TVALID;
wire axi4sout_TREADY;
wire [31:0] axi4sout_TDATA;


axi_datamover_0 datamover00 (
  .m_axi_s2mm_aclk(ap_clk),                        // input wire m_axi_s2mm_aclk
  .m_axi_s2mm_aresetn(ap_rst_n),                  // input wire m_axi_s2mm_aresetn
  .s2mm_err(),                                      // output wire s2mm_err
  .m_axis_s2mm_cmdsts_awclk(ap_clk),      // input wire m_axis_s2mm_cmdsts_awclk
  .m_axis_s2mm_cmdsts_aresetn(ap_rst_n),  // input wire m_axis_s2mm_cmdsts_aresetn
  .s_axis_s2mm_cmd_tvalid(axi4outcmd_TVALID),          // input wire s_axis_s2mm_cmd_tvalid
  .s_axis_s2mm_cmd_tready(axi4outcmd_TREADY),          // output wire s_axis_s2mm_cmd_tready
  .s_axis_s2mm_cmd_tdata(axi4outcmd_TDATA),            // input wire [103 : 0] s_axis_s2mm_cmd_tdata
  .m_axis_s2mm_sts_tvalid(),          // output wire m_axis_s2mm_sts_tvalid
  .m_axis_s2mm_sts_tready(1'b1),          // input wire m_axis_s2mm_sts_tready
  .m_axis_s2mm_sts_tdata(),            // output wire [7 : 0] m_axis_s2mm_sts_tdata
  .m_axis_s2mm_sts_tkeep(),            // output wire [0 : 0] m_axis_s2mm_sts_tkeep
  .m_axis_s2mm_sts_tlast(),            // output wire m_axis_s2mm_sts_tlast
  .m_axi_s2mm_awid(),                        // output wire [3 : 0] m_axi_s2mm_awid
  .m_axi_s2mm_awaddr(m00_axi_awaddr),                    // output wire [63 : 0] m_axi_s2mm_awaddr
  .m_axi_s2mm_awlen(m00_axi_awlen),                      // output wire [7 : 0] m_axi_s2mm_awlen
  .m_axi_s2mm_awsize(),                    // output wire [2 : 0] m_axi_s2mm_awsize
  .m_axi_s2mm_awburst(),                  // output wire [1 : 0] m_axi_s2mm_awburst
  .m_axi_s2mm_awprot(),                    // output wire [2 : 0] m_axi_s2mm_awprot
  .m_axi_s2mm_awcache(),                  // output wire [3 : 0] m_axi_s2mm_awcache
  .m_axi_s2mm_awuser(),                    // output wire [3 : 0] m_axi_s2mm_awuser
  .m_axi_s2mm_awvalid(m00_axi_awvalid),                  // output wire m_axi_s2mm_awvalid
  .m_axi_s2mm_awready(m00_axi_awready),                  // input wire m_axi_s2mm_awready
  .m_axi_s2mm_wdata(m00_axi_wdata),                      // output wire [511 : 0] m_axi_s2mm_wdata
  .m_axi_s2mm_wstrb(m00_axi_wstrb),                      // output wire [63 : 0] m_axi_s2mm_wstrb
  .m_axi_s2mm_wlast(m00_axi_wlast),                      // output wire m_axi_s2mm_wlast
  .m_axi_s2mm_wvalid(m00_axi_wvalid),                    // output wire m_axi_s2mm_wvalid
  .m_axi_s2mm_wready(m00_axi_wready),                    // input wire m_axi_s2mm_wready
  .m_axi_s2mm_bresp(2'b0),                      // input wire [1 : 0] m_axi_s2mm_bresp
  .m_axi_s2mm_bvalid(m00_axi_bvalid),                    // input wire m_axi_s2mm_bvalid
  .m_axi_s2mm_bready(m00_axi_bready),                    // output wire m_axi_s2mm_bready
  .s_axis_s2mm_tdata(axi4sout_TDATA),                    // input wire [511 : 0] s_axis_s2mm_tdata
  .s_axis_s2mm_tkeep(),                    // input wire [63 : 0] s_axis_s2mm_tkeep
  .s_axis_s2mm_tlast(),                    // input wire s_axis_s2mm_tlast
  .s_axis_s2mm_tvalid(axi4sout_TVALID),                  // input wire s_axis_s2mm_tvalid
  .s_axis_s2mm_tready(axi4sout_TREADY)                  // output wire s_axis_s2mm_tready
);

GlobalOutslice globaloutsliceSLR1toMem(
  .clock(ap_clk),
  .reset(areset),
  .io_subordinate_TVALID(axis01_tvalid),
  .io_subordinate_TREADY(axis01_tready),
  .io_subordinate_TDATA(axis01_tdata),
  .io_manager_TVALID(axi4sout_TVALID),
  .io_manager_TREADY(axi4sout_TREADY),
  .io_manager_TDATA(axi4sout_TDATA)
);

wire axi4incmd_TVALID;
wire axi4incmd_TREADY;
wire [103:0] axi4incmd_TDATA;

wire axi4sin_TVALID;
wire axi4sin_TREADY;
wire [511:0] axi4sin_TDATA;

axi_datamover_1 datamover01 (
  .m_axi_mm2s_aclk(ap_clk),                        // input wire m_axi_mm2s_aclk
  .m_axi_mm2s_aresetn(ap_rst_n),                  // input wire m_axi_mm2s_aresetn
  .mm2s_err(),                                      // output wire mm2s_err
  .m_axis_mm2s_cmdsts_aclk(ap_clk),        // input wire m_axis_mm2s_cmdsts_aclk
  .m_axis_mm2s_cmdsts_aresetn(ap_rst_n),  // input wire m_axis_mm2s_cmdsts_aresetn
  .s_axis_mm2s_cmd_tvalid(axi4incmd_TVALID),          // input wire s_axis_mm2s_cmd_tvalid
  .s_axis_mm2s_cmd_tready(axi4incmd_TREADY),          // output wire s_axis_mm2s_cmd_tready
  .s_axis_mm2s_cmd_tdata(axi4incmd_TDATA),            // input wire [103 : 0] s_axis_mm2s_cmd_tdata
  .m_axis_mm2s_sts_tvalid(),          // output wire m_axis_mm2s_sts_tvalid
  .m_axis_mm2s_sts_tready(1'b1),          // input wire m_axis_mm2s_sts_tready
  .m_axis_mm2s_sts_tdata(),            // output wire [7 : 0] m_axis_mm2s_sts_tdata
  .m_axis_mm2s_sts_tkeep(),            // output wire [0 : 0] m_axis_mm2s_sts_tkeep
  .m_axis_mm2s_sts_tlast(),            // output wire m_axis_mm2s_sts_tlast
  .m_axi_mm2s_arid(),                        // output wire [3 : 0] m_axi_mm2s_arid
  .m_axi_mm2s_araddr(m01_axi_araddr),                    // output wire [63 : 0] m_axi_mm2s_araddr
  .m_axi_mm2s_arlen(m01_axi_arlen),                      // output wire [7 : 0] m_axi_mm2s_arlen
  .m_axi_mm2s_arsize(),                    // output wire [2 : 0] m_axi_mm2s_arsize
  .m_axi_mm2s_arburst(),                  // output wire [1 : 0] m_axi_mm2s_arburst
  .m_axi_mm2s_arprot(),                    // output wire [2 : 0] m_axi_mm2s_arprot
  .m_axi_mm2s_arcache(),                  // output wire [3 : 0] m_axi_mm2s_arcache
  .m_axi_mm2s_aruser(),                    // output wire [3 : 0] m_axi_mm2s_aruser
  .m_axi_mm2s_arvalid(m01_axi_arvalid),                  // output wire m_axi_mm2s_arvalid
  .m_axi_mm2s_arready(m01_axi_arready),                  // input wire m_axi_mm2s_arready
  .m_axi_mm2s_rdata(m01_axi_rdata),                      // input wire [511 : 0] m_axi_mm2s_rdata
  .m_axi_mm2s_rresp(2'b0),                      // input wire [1 : 0] m_axi_mm2s_rresp
  .m_axi_mm2s_rlast(m01_axi_rlast),                      // input wire m_axi_mm2s_rlast
  .m_axi_mm2s_rvalid(m01_axi_rvalid),                    // input wire m_axi_mm2s_rvalid
  .m_axi_mm2s_rready(m01_axi_rready),                    // output wire m_axi_mm2s_rready
  .m_axis_mm2s_tdata(axi4sin_TDATA),                    // output wire [511 : 0] m_axis_mm2s_tdata
  .m_axis_mm2s_tkeep(),                    // output wire [63 : 0] m_axis_mm2s_tkeep
  .m_axis_mm2s_tlast(),                    // output wire m_axis_mm2s_tlast
  .m_axis_mm2s_tvalid(axi4sin_TVALID),                  // output wire m_axis_mm2s_tvalid
  .m_axis_mm2s_tready(axi4sin_TREADY)                   // input wire m_axis_mm2s_tready
);

GlobalInslice globalinsliceMemtoSLR1(
  .clock(ap_clk),
  .reset(areset),
  .io_subordinate_TVALID(axi4sin_TVALID),
  .io_subordinate_TREADY(axi4sin_TREADY),
  .io_subordinate_TDATA(axi4sin_TDATA),
  .io_manager_TVALID(axis00_tvalid),
  .io_manager_TREADY(axis00_tready),
  .io_manager_TDATA(axis00_tdata)
);

{%- for bus in buss %}

wire axi4bkincmd_{{ bus[1] }}_TVALID;
wire axi4bkincmd_{{ bus[1] }}_TREADY;
wire [103:0] axi4bkincmd_{{ bus[1] }}_TDATA;
wire axi4bkin_{{ bus[1] }}_TVALID;
wire axi4bkin_{{ bus[1] }}_TREADY;
wire [511:0] axi4bkin_{{ bus[1] }}_TDATA;

axi_datamover_1 datamover{{ bus[0] }} (
  .m_axi_mm2s_aclk(ap_clk),                        // input wire m_axi_mm2s_aclk
  .m_axi_mm2s_aresetn(ap_rst_n),                  // input wire m_axi_mm2s_aresetn
  .mm2s_err(),                                      // output wire mm2s_err
  .m_axis_mm2s_cmdsts_aclk(ap_clk),        // input wire m_axis_mm2s_cmdsts_aclk
  .m_axis_mm2s_cmdsts_aresetn(ap_rst_n),  // input wire m_axis_mm2s_cmdsts_aresetn
  .s_axis_mm2s_cmd_tvalid(axi4bkincmd_{{ bus[1] }}_TVALID),          // input wire s_axis_mm2s_cmd_tvalid
  .s_axis_mm2s_cmd_tready(axi4bkincmd_{{ bus[1] }}_TREADY),          // output wire s_axis_mm2s_cmd_tready
  .s_axis_mm2s_cmd_tdata(axi4bkincmd_{{ bus[1] }}_TDATA),            // input wire [103 : 0] s_axis_mm2s_cmd_tdata
  .m_axis_mm2s_sts_tvalid(),          // output wire m_axis_mm2s_sts_tvalid
  .m_axis_mm2s_sts_tready(ap_rst_n),          // input wire m_axis_mm2s_sts_tready
  .m_axis_mm2s_sts_tdata(),            // output wire [7 : 0] m_axis_mm2s_sts_tdata
  .m_axis_mm2s_sts_tkeep(),            // output wire [0 : 0] m_axis_mm2s_sts_tkeep
  .m_axis_mm2s_sts_tlast(),            // output wire m_axis_mm2s_sts_tlast
  .m_axi_mm2s_arid(),                        // output wire [3 : 0] m_axi_mm2s_arid
  .m_axi_mm2s_araddr(m{{ bus[0] }}_axi_araddr),                    // output wire [63 : 0] m_axi_mm2s_araddr
  .m_axi_mm2s_arlen(m{{ bus[0] }}_axi_arlen),                      // output wire [7 : 0] m_axi_mm2s_arlen
  .m_axi_mm2s_arsize(),                    // output wire [2 : 0] m_axi_mm2s_arsize
  .m_axi_mm2s_arburst(),                  // output wire [1 : 0] m_axi_mm2s_arburst
  .m_axi_mm2s_arprot(),                    // output wire [2 : 0] m_axi_mm2s_arprot
  .m_axi_mm2s_arcache(),                  // output wire [3 : 0] m_axi_mm2s_arcache
  .m_axi_mm2s_aruser(),                    // output wire [3 : 0] m_axi_mm2s_aruser
  .m_axi_mm2s_arvalid(m{{ bus[0] }}_axi_arvalid),                  // output wire m_axi_mm2s_arvalid
  .m_axi_mm2s_arready(m{{ bus[0] }}_axi_arready),                  // input wire m_axi_mm2s_arready
  .m_axi_mm2s_rdata(m{{ bus[0] }}_axi_rdata),                      // input wire [511 : 0] m_axi_mm2s_rdata
  .m_axi_mm2s_rresp(2'b0),                      // input wire [1 : 0] m_axi_mm2s_rresp
  .m_axi_mm2s_rlast(m{{ bus[0] }}_axi_rlast),                      // input wire m_axi_mm2s_rlast
  .m_axi_mm2s_rvalid(m{{ bus[0] }}_axi_rvalid),                    // input wire m_axi_mm2s_rvalid
  .m_axi_mm2s_rready(m{{ bus[0] }}_axi_rready),                    // output wire m_axi_mm2s_rready
  .m_axis_mm2s_tdata(axi4bkin_{{ bus[1] }}_TDATA),                    // output wire [511 : 0] m_axis_mm2s_tdata
  .m_axis_mm2s_tkeep(),                    // output wire [63 : 0] m_axis_mm2s_tkeep
  .m_axis_mm2s_tlast(),                    // output wire m_axis_mm2s_tlast
  .m_axis_mm2s_tvalid(axi4bkin_{{ bus[1] }}_TVALID),                  // output wire m_axis_mm2s_tvalid
  .m_axis_mm2s_tready(axi4bkin_{{ bus[1] }}_TREADY)                 // input wire m_axis_mm2s_tready
);
{%- endfor %}

AXISBRTop axisbr(
  .clock(ap_clk),
  .reset(areset),
  .io_brvalid(axi4sout_TVALID),
  .io_axi4outcmd_TVALID(axi4outcmd_TVALID),
  .io_axi4outcmd_TREADY(axi4outcmd_TREADY),
  .io_axi4outcmd_TDATA(axi4outcmd_TDATA),
  .io_axi4incmd_TVALID(axi4incmd_TVALID),
  .io_axi4incmd_TREADY(axi4incmd_TREADY),
  .io_axi4incmd_TDATA(axi4incmd_TDATA),
  {%- for bus in buss %}
  .io_axi4bkincmd_{{ bus[1] }}_TVALID(axi4bkincmd_{{ bus[1] }}_TVALID),
  .io_axi4bkincmd_{{ bus[1] }}_TREADY(axi4bkincmd_{{ bus[1] }}_TREADY),
  .io_axi4bkincmd_{{ bus[1] }}_TDATA(axi4bkincmd_{{ bus[1] }}_TDATA),
  {%- endfor %}
  .io_outaddr(axi00_ptr0),
  .io_inaddr(axi01_ptr0),
  {%- for bus in buss %}
  .io_bkaddr_{{ bus[1] }}(axi{{ bus[0] }}_ptr0),
  {%- endfor %}
  .io_ap_start(ap_start),
  .io_ap_done(ap_done),
  .io_ap_idle(ap_idle),
  .io_ap_ready(ap_ready)
);

AXISBRMiddle axisbrmiddle(
  .clock(ap_clk),
  .reset(areset),
  {%- for bus in bkbuss %}
  .io_axi4bkin_{{ bus[1] }}_TVALID(axi4bkin_{{ bus[1] }}_TVALID),
  .io_axi4bkin_{{ bus[1] }}_TREADY(axi4bkin_{{ bus[1] }}_TREADY),
  .io_axi4bkin_{{ bus[1] }}_TDATA(axi4bkin_{{ bus[1] }}_TDATA),
  {%- endfor %}
  .io_axi4sin_0_TVALID(axis02_tvalid),
  .io_axi4sin_0_TDATA(axis02_tdata),
  .io_axi4sin_1_TDATA(axis03_tdata),
  .io_axi4sin_2_TDATA(axis04_tdata),
  .io_axi4sin_3_TDATA(axis05_tdata),
  .io_axi4sout_0_TVALID(axis06_tvalid),
  .io_axi4sout_0_TDATA(axis06_tdata),
  .io_axi4sout_1_TDATA(axis07_tdata),
  .io_axi4sout_2_TDATA(axis08_tdata),
  .io_axi4sout_3_TDATA(axis09_tdata)
);

endmodule
`default_nettype wire
